export function useMockUserfront({ authFlow, mode }?: {
    authFlow: any;
    mode?: string;
}): MockUserfront;
export default createMockUserfront;
declare class MockUserfront {
    constructor({ authFlow, mode }: {
        authFlow: any;
        mode: any;
    });
    store: {
        tenantId: string;
        tokens: {};
        user: {
            getTotp: () => Promise<{
                totpSecret: string;
                qrCode: string;
                backupCodes: string[];
            }>;
        };
    };
    logAllMethodCalls: boolean;
    requireMfa: boolean;
    requireMfaSetup: boolean;
    isAwaitingSecondFactor: boolean;
    authFlow: any;
    mode: any;
    login(): Promise<{
        mode: string;
        message: string;
        redirectTo: string;
        sessionId: string;
        nonce: string;
        tokens: {
            access: {
                value: string;
                cookieOptions: {
                    secure: boolean;
                    sameSite: string;
                    expires: number;
                };
            };
            id: {
                value: string;
                cookieOptions: {
                    secure: boolean;
                    sameSite: string;
                    expires: number;
                };
            };
            refresh: {
                value: string;
                cookieOptions: {
                    secure: boolean;
                    sameSite: string;
                    expires: number;
                };
            };
        };
        userId: number;
        tenantId: string;
        userUuid: string;
        username: string;
        email: string;
        phoneNumber: string;
        name: string;
        image: string;
        locked: boolean;
        data: {
            custom: string;
        };
        isConfirmed: boolean;
        isMfaRequired: boolean;
        lastActiveAt: string;
        lastMessagedAt: string;
        confirmedAt: string;
        createdAt: string;
        updatedAt: string;
        tenant: {
            tenantId: string;
            name: string;
        };
        authentication: {
            firstFactors: {
                strategy: string;
                channel: string;
            }[];
            secondFactors: {
                strategy: string;
                channel: string;
            }[];
        };
        authorization: {
            demo1234: {
                roles: any[];
            };
        };
    } | {
        mode: string;
        message: string;
        isMfaRequired: boolean;
        firstFactorToken: string;
        authentication: {
            firstFactor: {
                strategy: string;
                channel: string;
            };
            secondFactors: {
                strategy: string;
                channel: string;
                isConfiguredByUser: boolean;
            }[];
        };
    }>;
    signup(): Promise<{
        mode: string;
        message: string;
        isMfaRequired: boolean;
        firstFactorToken: string;
        authentication: {
            firstFactor: {
                strategy: string;
                channel: string;
            };
            secondFactors: {
                strategy: string;
                channel: string;
                isConfiguredByUser: boolean;
            }[];
        };
    } | {
        mode: string;
        message: string;
        redirectTo: string;
        sessionId: string;
        nonce: string;
        tokens: {
            access: {
                value: string;
                cookieOptions: {
                    secure: boolean;
                    sameSite: string;
                    expires: number;
                };
            };
            id: {
                value: string;
                cookieOptions: {
                    secure: boolean;
                    sameSite: string;
                    expires: number;
                };
            };
            refresh: {
                value: string;
                cookieOptions: {
                    secure: boolean;
                    sameSite: string;
                    expires: number;
                };
            };
        };
        userId: number;
        tenantId: string;
        userUuid: string;
        username: string;
        email: string;
        phoneNumber: string;
        name: string;
        image: string;
        locked: boolean;
        data: {
            custom: string;
        };
        isConfirmed: boolean;
        isMfaRequired: boolean;
        lastActiveAt: string;
        lastMessagedAt: string;
        confirmedAt: string;
        createdAt: string;
        updatedAt: string;
        tenant: {
            tenantId: string;
            name: string;
        };
        authentication: {
            firstFactors: {
                strategy: string;
                channel: string;
            }[];
            secondFactors: {
                strategy: string;
                channel: string;
            }[];
        };
        authorization: {
            demo1234: {
                roles: any[];
            };
        };
    }>;
    resetPassword(): Promise<{
        mode: string;
        message: string;
        isMfaRequired: boolean;
        firstFactorToken: string;
        authentication: {
            firstFactor: {
                strategy: string;
                channel: string;
            };
            secondFactors: {
                strategy: string;
                channel: string;
                isConfiguredByUser: boolean;
            }[];
        };
    } | {
        mode: string;
        message: string;
        redirectTo: string;
        sessionId: string;
        nonce: string;
        tokens: {
            access: {
                value: string;
                cookieOptions: {
                    secure: boolean;
                    sameSite: string;
                    expires: number;
                };
            };
            id: {
                value: string;
                cookieOptions: {
                    secure: boolean;
                    sameSite: string;
                    expires: number;
                };
            };
            refresh: {
                value: string;
                cookieOptions: {
                    secure: boolean;
                    sameSite: string;
                    expires: number;
                };
            };
        };
    }>;
    updatePassword(): Promise<{
        mode: string;
        message: string;
        isMfaRequired: boolean;
        firstFactorToken: string;
        authentication: {
            firstFactor: {
                strategy: string;
                channel: string;
            };
            secondFactors: {
                strategy: string;
                channel: string;
                isConfiguredByUser: boolean;
            }[];
        };
    } | {
        mode: string;
        message: string;
        redirectTo: string;
        sessionId: string;
        nonce: string;
        tokens: {
            access: {
                value: string;
                cookieOptions: {
                    secure: boolean;
                    sameSite: string;
                    expires: number;
                };
            };
            id: {
                value: string;
                cookieOptions: {
                    secure: boolean;
                    sameSite: string;
                    expires: number;
                };
            };
            refresh: {
                value: string;
                cookieOptions: {
                    secure: boolean;
                    sameSite: string;
                    expires: number;
                };
            };
        };
    }>;
    setMode(): Promise<{
        mode: any;
        authentication: any;
    }>;
    attachToWindow(): void;
    sendVerificationCode(): Promise<{}>;
    logout(): Promise<{
        message: string;
        redirectTo: string;
    }>;
    redirectIfLoggedIn(): Promise<any>;
    sendLoginLink(): Promise<{
        message: string;
        result: {
            email: string;
            submittedAt: string;
            messageId: string;
        };
    }>;
    sendResetLink(): Promise<{
        message: string;
        result: {
            email: string;
            submittedAt: string;
            messageId: string;
        };
    }>;
}
declare function createMockUserfront({ authFlow, mode }?: {
    authFlow: any;
    mode?: string;
}): MockUserfront;
